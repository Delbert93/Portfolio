@page "/projectentry/edit/{slug}"
@inject Portfolio.Blazor.ProjectApiService portfolioApi
@inject NavigationManager navManager
@using Portfolio.Shared
@using Portfolio.Shared.ViewModels
<h3>EditProject</h3>

<label>Project Title:</label>
<br />
<label><MarkDownView Content="@CurrentProject.Title" /></label>
<br />
<textarea type="text"/>
<br />
<br />

<label>Project Requirementes:</label>
<br />
<label><MarkDownView Content="@CurrentProject.Requirements" /></label>
<br />
<textarea type="text"/>
<br />

<label>Project Design:</label>
<br />
<label><MarkDownView Content="@CurrentProject.Design" /></label>
<br />
<textarea type="text"/>
<br />

<label>Project CompletionDate: </label>
<br />
<input typp="date" @bind="CompletionDate">
<br />

<label>Language:</label>
<br />
<textarea type="text" @bind="languageName"/>
<br />
<button class="myBtn" @onclick="AddLanguage">Add Language</button>


<div>
    @foreach (var lan in Languages ?? new string[] { })
    {
        <label class="lists">@lan</label>
        <br />
    }
</div>

<label>Platform:</label>
<br />
<textarea type="text" @bind="platformName"/>
<br />
<button class="myBtn" @onclick="AddPlatform">Add Platform</button>


<div>
    @foreach (var plat in Platforms ?? new string[] { })
    {
        <label class="lists">@plat</label>
        <br />
    }
</div>

<label>Technology:</label>
<br />
<textarea type="text" @bind="technologyName"/>
<br />
<button class="myBtn" @onclick="AddTechnology">Add Technology</button>


<div>
    @foreach (var tech in Technologies ?? new string[] { })
    {
        <label class="lists">@tech</label>
        <br />
    }
</div>

<button class="myBtn" @onclick="SaveChanges">Update</button>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public string Slug { get; set; }

    public ProjectViewModel CurrentProject { get; set; } = new ProjectViewModel();
    public string Title { get; set; }
    public string Requirementes { get; set; }
    public string Desgin { get; set; }
    public DateTime CompletionDate { get; set; }
    private IEnumerable<string> Languages { get; set; }
    private IEnumerable<string> Platforms { get; set; }
    private IEnumerable<string> Technologies { get; set; }

    private string languageName = " ";
    private string platformName = " ";
    private string technologyName = " ";

    protected override async Task OnInitializedAsync()
    {
        await RefreshProjectsAsync();
    }

    //TODO use the slug
    private async Task AddLanguage()
    {
        await portfolioApi.AssignLanguage(ProjectId, languageName);
        await RefreshProjectsAsync();
    }

    //TODO use the slug
    private async Task AddPlatform()
    {
        await portfolioApi.AssignPlatform(ProjectId, platformName);
        await RefreshProjectsAsync();
    }

    //TODO use the slug
    private async Task AddTechnology()
    {
        await portfolioApi.AssignTechnology(ProjectId, technologyName);
        await RefreshProjectsAsync();
    }

    public async Task SaveChanges()
    {
        CurrentProject.Title = Title;
        CurrentProject.Requirements = Requirementes;
        CurrentProject.Design = Desgin;
        CurrentProject.CompletionDate = CompletionDate;

        await portfolioApi.Edit(CurrentProject);
        navManager.NavigateTo("https://delbert93.github.io/Portfolio/projectentry");
    }

    private async Task RefreshProjectsAsync()
    {
        CurrentProject = await portfolioApi.GetProjectBySlugAsync(Slug);
        ProjectId = CurrentProject.Id;
        Title = CurrentProject.Title;
        Requirementes = CurrentProject.Requirements;
        Desgin = CurrentProject.Design;
        CompletionDate = CurrentProject.CompletionDate;
        Languages = CurrentProject.Languages;
        Platforms = CurrentProject.Platforms;
        Technologies = CurrentProject.Technologies;
        Languages.Distinct();
        Platforms.Distinct();
        Technologies.Distinct();
    }

}
