@page "/projectentry"
@inject HttpClient http
@inject ProjectApiService portfoiliApi
@inject NavigationManager navManager
@using Portfolio.Shared

<h3>ProjectEntry</h3>
<label>Project Name</label>
<input type="text" @bind="title">
<br>
<br>
<label>Requirements:</label>
<input type="text" @bind="requirement">
<br>
<br>
<label>Design:</label>
<input type="text" @bind="design">
<br>
<br>
@*TODO On saving with the language we need to save the lannguage to the database for language, the project to project and create
the association between the two in the projectLanguage*@
<label>Language:</label>
<input type="text" @bind="langaugeName">
<br>
<br>
<input type="date" @bind="completionDate" />
<button @onclick="addProjectToDatabase">Submite Project!</button>

<div>
    <label>Projects should show here</label>
    @foreach (var st in projects ?? new Project[] { })
    {
        <br />
        <label><a class="text-primary" @onclick="() => NavigateToSingalProjectPage(st.Id)">  @st.Title </a></label>
        <button><a class="text-primary" @onclick="() => NavigateToEditPage(st.Id)">Edit</a></button>
        <button @onclick="(() => deleteProjectFromDatabase(st))">Delete</button>
    }
</div>

@code
{
    private string title = " ";
    private string requirement = " ";
    private string design = " ";
    private string langaugeName = " ";
    private DateTime completionDate;


    private IEnumerable<Project> projects { get; set; }

    private async Task addProjectToDatabase()
    {
        var project = new Portfolio.Shared.Project
        {
            Title = title,
            Requirements = requirement,
            Design = design,
            CompletionDate = completionDate
        };
        var language = new Portfolio.Shared.Language
        {
            Name = langaugeName
        };
        var projLang = new Portfolio.Shared.ProjectLanguage
        {
            ProjectId = project.Id,
            Project = project,
            LanguageId = language.Id,
            Language = language
        };
        try
        {
            var response = await http.PostAsJsonAsync("/project", project);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }

        await RefreshProjectsAsync();
    }

    public void NavigateToSingalProjectPage(int Id)
    {
        navManager.NavigateTo("projectentry/" + Id);
    }

    public void NavigateToEditPage(int Id)
    {
        navManager.NavigateTo("projectentry/edit/" + Id);
    }

    private async Task deleteProjectFromDatabase(Project project)
    {
        await portfoiliApi.DeleteAsync(project);
        await RefreshProjectsAsync();
    }



    private async Task loadProjects()
    {
        var response = await http.GetStringAsync("/project");
    }



    protected override async Task OnInitializedAsync()
    {
        await RefreshProjectsAsync();
    }



    private async Task RefreshProjectsAsync()
    {
        projects = await http.GetFromJsonAsync<IEnumerable<Project>>("/project");
    }

}
