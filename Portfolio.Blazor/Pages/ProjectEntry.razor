@page "/projectentry"
@using Portfolio.Shared
@inject ProjectApiService portfoilApi

<h3>ProjectEntry</h3>

<div class="container">
    <div class="row">
        <div class="col-25">
            <label for="fname">Project Title</label>
        </div>
        <div class="col-75">
            <input type="text" id="fname" name="title" placeholder="My Project" @bind="title">
        </div>
    </div>
    <div class="row">
        <div class="col-25">
            <label for="subject">Requirements</label>
        </div>
        <div class="col-75">
            <textarea id="subject" name="design" style="height:200px" @bind="requirement"></textarea>
        </div>
    </div>
    <div class="row">
    </div>
    <div class="row">
        <div class="col-25">
            <label for="subject">Design</label>
        </div>
        <div class="col-75">
            <textarea id="subject" name="design" style="height:200px" @bind="design"></textarea>
        </div>
    </div>
    <div class="row">
        <div class="col-25">
            <label for="fname">Completion Date</label>
        </div>
        <div class="col-75">
            <input type="date" placeholder="2020-10-26" id="fname" name="completion Date" @bind="completionDate">
        </div>
    </div>
    <div class="row">
        <button class="myBtn" @onclick="addProjectToDatabase">Submit Project!</button>
    </div>
</div>

@code
{
    private IEnumerable<Project> projects { get; set; }

    private string title = " ";
    private string requirement = " ";
    private string design = " ";
    private string langaugeName = " ";
    private DateTime completionDate;


    private async Task addProjectToDatabase()
    {
        var project = new Portfolio.Shared.Project
        {
            Title = title,
            Requirements = requirement,
            Design = design,
            CompletionDate = completionDate
        };
        try
        {
            await portfoilApi.AddProjectAsync(project);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }

        await RefreshProjectsAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshProjectsAsync();
    }


    private async Task RefreshProjectsAsync()
    {
        projects = await portfoilApi.GetProjectsAsync();
    }

}
