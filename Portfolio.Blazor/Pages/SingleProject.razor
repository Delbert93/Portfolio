@page "/projectentry/{slug}"
@inject Portfolio.Blazor.ProjectApiService portfoiliApi
@inject NavigationManager navManager
@using Portfolio.Shared
@using Portfolio.Shared.ViewModels
<h3>@Title</h3>



<label>Project Title:</label>
<label><MarkDownView Content="@CurrentProject.Title" /></label>
<br />
<br />

<label>Project Requirementes:</label>
<br />
<label><MarkDownView Content="@CurrentProject.Requirements" /></label>
<br />

<label>Project Design:</label>
<br />
<label><MarkDownView Content="@CurrentProject.Design" /></label>
<br />

<label>Langauges:</label>
<br />
<div>
    @foreach (var lan in Languages ?? new string[] { })
    {
        <br />
        <label><a class="text-primary" @onclick="() => NavigateToSingleLanguagePage(lan)">@lan</a></label>
    }
</div>
<br />

<label>Platforms:</label>
<br />
<div>
    @foreach (var plat in Platforms ?? new string[] { })
    {
        <br />
        <label><a class="text-primary" @onclick="() => NavigateToSinglePlatformPage(plat)">@plat</a></label>
    }
</div>
<br />

<label>Technology:</label>
<br />
<div>
    @foreach (var tech in Technologies ?? new string[] { })
    {
        <br />
        <label><a class="text-primary" @onclick="() => NavigateToSingleTechnologyPage(tech)">@tech</a></label>
    }
</div>
<br />

<label>Project CompletionDate: </label>
<label>@CompletionDate</label>
<br />

<button><a class="text-primary" @onclick="() => NavigateToEditPage(Slug)">Edit</a></button>
<button @onclick="(() => deleteProjectFromDatabase(Project))">Delete</button>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public string Slug { get; set; }

    public Project Project { get; set; } = new Project();
    public ProjectViewModel CurrentProject { get; set; } = new ProjectViewModel();
    public string Title { get; set; }
    public string Requirementes { get; set; }
    public string Desgin { get; set; }
    public DateTime CompletionDate { get; set; }

    private IEnumerable<string> Languages { get; set; }
    private IEnumerable<string> Platforms { get; set; }
    private IEnumerable<string> Technologies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Slug == null)
        {
            return;
        }
        CurrentProject = await portfoiliApi.GetProjectBySlugAsync(Slug);

        Title = CurrentProject.Title;
        Requirementes = CurrentProject.Requirements;
        Desgin = CurrentProject.Design;
        CompletionDate = CurrentProject.CompletionDate;
        Languages = CurrentProject.Languages;
        Platforms = CurrentProject.Platforms;
        Technologies = CurrentProject.Technologies;
        Languages.Distinct();
        Platforms.Distinct();
        Technologies.Distinct();
    }

    async Task refreshAsync() => CurrentProject = await portfoiliApi.GetProjectBySlugAsync(Slug);

    protected async Task NavigateToSingleLanguagePage(string languageName)
    {
        var language = await portfoiliApi.GetLanguageByNameAsync(languageName);
        navManager.NavigateTo("languages/" + language.Slug);
    }

    protected async Task NavigateToSinglePlatformPage(string platformName)
    {
        var platform = await portfoiliApi.GetPlatformByNameAsync(platformName);
        navManager.NavigateTo("platforms/" + platform.Slug);
    }

    protected async Task NavigateToSingleTechnologyPage(string technologyName)
    {
        var technology = await portfoiliApi.GetTechnologyByNameAsync(technologyName);
        navManager.NavigateTo("technologies/" + technology.Slug);
    }

    public void NavigateToEditPage(string slug)
    {
        navManager.NavigateTo("projectentry/edit/" + slug);
    }

    private async Task deleteProjectFromDatabase(Project project)
    {
        await portfoiliApi.DeleteProjectAsync(project);
        navManager.NavigateTo("projectentry/");
    }
}
